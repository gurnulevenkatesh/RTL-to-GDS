//Gurnula venkatesh
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////
// Project: Tasks of Testbench for 50th Order FIR Filter
// Creator: Yaseen Salah                                                  
// Date   : 10 Feb 2023                                    
//////////////////////////////////////////////////////////////////////////////
// Project: 50th Order FIR Filter
// Creator: Yaseen Salah                                                  
// Date   : 10 Feb 2023                                                  
/////////////////////////////////////////////////////////////////////////////
module fir_filter
	#(  parameter ORDER	         = 10 ,
		parameter DATA_IN_WIDTH  = 16 ,
		parameter DATA_OUT_WIDTH = 32 ,
		parameter TAP_DATA_WIDTH = 16 ,
		parameter TAP_ADDR_WIDTH = 6  )
	(
		input  wire  signed [DATA_IN_WIDTH-1 : 0]   i_fir_data_in  ,
		input  wire                                 i_fir_en  	   ,
		input  wire         			    i_tap_wr_en    ,
		input  wire  	    [TAP_ADDR_WIDTH-1 : 0]  i_tap_wr_addr  , 
		input  wire         [TAP_DATA_WIDTH-1 : 0]  i_tap_wr_data  , 
		input  wire                                 i_clk          ,
		input  wire                        	    i_rst_n        ,
		output reg   signed [DATA_OUT_WIDTH-1 : 0]  o_fir_data_out      
	);

//internal registers declaration as 2D-arrays for optimized hardware description 
reg signed [TAP_DATA_WIDTH-1 : 0] tap[ORDER : 0] ;
reg signed [DATA_IN_WIDTH-1  : 0] buffer[ORDER : 0] ;
reg signed [DATA_OUT_WIDTH-1 : 0] accumulator[ORDER : 0] ;

integer i ;

//51-taps block logic
always @(posedge i_clk or negedge i_rst_n) begin
	if (!i_rst_n)
		begin
		//50th order fir coefficients
			tap[0]  <= 16'b 0000_0001_1100_0101 ;
			tap[1]  <= 16'b 0000_0011_1100_1101 ;
			tap[2]  <= 16'b 0000_1001_0010_1110 ;
			tap[3]  <= 16'b 0000_1111_1111_0010 ;
			tap[4]  <= 16'b 0001_0101_0111_1110 ;
			tap[5]  <= 16'b 0001_0111_1010_0000 ;
			tap[6]  <= 16'b 0001_0101_0111_1110;
			tap[7]  <= 16'b 0000_1111_1111_0010 ;
			tap[8]  <= 16'b 0000_1001_0010_1110;
			tap[9]  <= 16'b 0000_0011_1100_1101;
			tap[10] <= 16'b 0000_0001_1100_0101;
		end
	else if(i_tap_wr_en && !i_fir_en) //preventing coeff change during the operation
		begin
			tap[i_tap_wr_addr] <= i_tap_wr_data ;
		end
end

//51-buffers block logic
always @(posedge i_clk or negedge i_rst_n) begin
	if (!i_rst_n)
		begin
			for (i=0 ; i<=ORDER ; i=i+1)
				begin
					buffer[i] <= 16'b0 ;
				end
		end
	else if (i_fir_en)
		begin
			buffer[0] <= i_fir_data_in ;
			for (i=0 ; i<ORDER ; i=i+1)
				begin
					buffer[i+1] <= buffer[i] ;
				end
		end
end

//51-accumulator block logic
always @(posedge i_clk or negedge i_rst_n) begin
	if (!i_rst_n)
		begin
			for (i=0 ; i<=ORDER ; i=i+1)
				begin
					accumulator[i] <= 32'b0 ;
				end			
		end
	else if (i_fir_en) 
		begin
			for (i=0 ; i<=ORDER ; i=i+1)
				begin
					accumulator[i] <= buffer[i] * tap[i] ;
				end		
		end
end

//output logic
always @(posedge i_clk or negedge i_rst_n) begin
	if (!i_rst_n)
		begin
			o_fir_data_out <= 32'b0 ;
		end
	else if (i_fir_en)
		begin
			o_fir_data_out <= (accumulator[0]  + accumulator[1] 
					+ accumulator[2]  + accumulator[3]
					+ accumulator[4]  + accumulator[5]
					+ accumulator[6]  + accumulator[7]
					+ accumulator[8]  + accumulator[9]
					+ accumulator[10])>>>15 ;					  				  
		end
end
 
endmodule
